<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.krm.dbaudit.web.modeltool.mapper.ToolFlowMapper">
	<!-- 生成目标表表名 -->
	<select id="initTargetTableName" resultType="java.lang.String">
		select F_MK_TABLENAME() as targettable from dual
	</select>
	
	<!-- 生成流程ID -->
	<select id="initFlowID" resultType="java.lang.String">
		select seq_flow_id.nextval as flowid from dual
	</select>
	
	<!-- 根据流程获取表名 -->
	<select id="getTableNameByFlowID" resultType="java.lang.String">
		select target_table from TOOL_DEF_FLOW where id=#{flowid}
	</select>
	
	<!-- 根据表名获取流程ID -->
	<select id="getFlowIDByTable" resultType="java.lang.String">
		select id from TOOL_DEF_FLOW where target_table=#{tablename}
	</select>
	
	<!-- 根据表别名获取数量，用于识别是否重复 -->
	<select id="getTableCountByAlias" resultType="java.lang.Integer">
		select count(1) as tablecount from TOOL_DEF_TABLE where table_alias=#{tablealias}
	</select>
	
	<!-- 写入目标表信息 -->
	<insert id="writeTaretTableInfo">
		insert into TOOL_DEF_TABLE(TABLE_NAME,TABLE_ALIAS,TABLE_PARENT,TABLE_FLAG,TABLE_TYPE_ID,CREATE_BY) values(#{targettable},#{tablealias},#{srctable},2,0,#{createby})
	</insert>
	
	<!-- 获取字段别名，处理重复 -->
	<select id="getFieldAlias" resultType="java.lang.String">
		select F_MK_FIELDALIAS(#{targettable},#{fieldalias},#{fromfieldid}) as field_alias from dual
	</select>
	
	<!-- 写入目标表信息 -->
	<insert id="writeFieldInfo">
		insert into TOOL_DEF_TABLEFIELD(ID,TABLE_NAME,FIELD_NAME,FIELD_ALIAS,FIELD_ENTITY_TYPE,FIELD_TYPE,FIELD_LENGTH,FROM_FIELDID,FIELD_ORDER,FIELD_SCRIPT) select SEQ_TABLEFIELD_ID.nextval,#{targettable},'AUTOFIELD'||#{fieldorder},#{fieldalias},1,FIELD_TYPE,FIELD_LENGTH,#{fromfieldid},#{fieldorder},#{collecttype} from TOOL_DEF_TABLEFIELD where id=#{fromfieldid}
	</insert>
	
	<!-- 写入流程信息 -->
	<insert id="writeFlowInfo">
		insert into TOOL_DEF_FLOW(ID,FLOW_NAME,PARENT_FLOW_ID,PROC_SCRIPT,TARGET_TABLE,SOURCE_TABLE1,SOURCE_TABLE2,PROC_MODE) values(#{flowid},#{flowname},#{parentflowid},#{flowscript},#{targettable},#{srctable1},#{srctable2},#{mode})
	</insert>
	
	<!-- 写入查询条件信息 -->
	<insert id="writeConditionInfo">
		insert into TOOL_FLOW_CONDITION(id,FLOW_ID,STR_CONDITION) values(SEQ_CONTENT_ID.nextval,#{flowid},#{condition})
	</insert>
	
	<!-- 获取建表语句 -->
	<!-- 
	<select id="getCreateTable" resultType="java.lang.String">
		select F_GET_CREATETABLESQL(#{tablename}) as runsql from dual
	</select>
	 -->
	
	<!-- 数据提取，写入数据提取范围 -->
	<insert id="writeGetRange">
		insert into TOOL_FLOW_RANGE(ID,FLOW_ID,BEGIN_LINE,END_LINE) values(SEQ_RANGE_ID.nextval,#{flowid},#{beginnum},#{endnum})
	</insert>
	
	<!-- 获取提取数据sql -->
	<!-- 
	<select id="getProcGetDataSql" resultType="java.lang.String">
		select F_GET_PROC_GETDATASQL(#{flowid},#{targettable},#{srctable}) as runsql from dual
	</select>
	 -->
	 
	<!-- 提取字段属性,是否是虚拟字段 -->
	<select id="getlFieldEntityType" resultType="java.lang.String">
		select FIELD_ENTITY_TYPE from TOOL_DEF_TABLEFIELD where id=#{fieldid}
	</select>
	
	<!-- 虚拟列相关 -->
	<!-- 检查列别名重复 -->
	<select id="checkSameFieldAlias" resultType="java.lang.Integer">
		select count(1) from TOOL_DEF_TABLEFIELD where TABLE_NAME=#{tablename} and FIELD_ALIAS=#{fieldalias}
	</select>
	
	<!-- 虚拟列 获取指定字段排序 -->
	<select id="getOrderByFieldId" resultType="java.lang.Integer">
		select field_order from TOOL_DEF_TABLEFIELD where id=#{fieldid}
	</select>
	
	<!-- 获取字段个数 -->
	<select id="getFieldCountByTable" resultType="java.lang.Integer">
		select count(1)+1 as field_num from TOOL_DEF_TABLEFIELD where TABLE_NAME=#{tablename}
	</select>
	
	<!-- 获取最大排序数字 -->
	<select id="getMaxOrderByTable" resultType="java.lang.Integer">
		select max(field_order)+1 as field_order from TOOL_DEF_TABLEFIELD where TABLE_NAME=#{tablename}
	</select>
	
	<update id="updateFieldOrder">
		update TOOL_DEF_TABLEFIELD set FIELD_ORDER=FIELD_ORDER+1 where FIELD_ORDER>=#{fieldorder} and TABLE_NAME=#{tablename}
	</update>
	
	<!-- 插入虚拟列 -->
	<insert id="insertVirtualField">
		insert into TOOL_DEF_TABLEFIELD(ID,TABLE_NAME,FIELD_NAME,FIELD_ALIAS,FIELD_ENTITY_TYPE,FIELD_TYPE,FIELD_LENGTH,FIELD_ORDER,FIELD_SCRIPT) values(SEQ_TABLEFIELD_ID.nextval,#{tablename},'AUTOFIELD'||#{fieldnum},#{fieldalias},0,#{fieldtype},#{fieldlength},#{fieldorder},#{fieldscript})
	</insert>
	
	<!-- 删除虚拟列前判断是否下级使用该虚拟列 -->
	<select id="getVirtualFieldUseCount" resultType="java.lang.Integer">
		select count(1) from TOOL_DEF_TABLEFIELD where from_fieldid=#{fieldid}
	</select>
	
	<!-- 删除虚拟列 -->
	<update id="deleteVirtualField">
		delete from TOOL_DEF_TABLEFIELD where id=#{fieldid}
	</update>
	
	<!-- 汇总相关 -->
	<!-- 获取提取数据sql -->
	<select id="getProcGroupDataSql" resultType="java.lang.String">
		select F_GET_PROC_GROUPDATASQL(#{flowid},#{targettable},#{srctable}) as runsql from dual
	</select>
	
	<!-- 数据合并，写入关联字段 -->
	<insert id="writeRelationField">
		insert into TOOL_FLOW_MERGE(ID,FLOW_ID,CHECK_FIELD_ID1,CHECK_FIELD_ID2) values(seq_merge_id.nextval,#{flowid},#{id1},#{id2})
	</insert>
	
	<select id="getProcMergeDataSql1" resultType="java.lang.String">
		select F_GET_PROC_MERGEDATASQL_MODE1(#{flowid},#{targettable},#{srctable1},#{srctable2}) as runsql from dual
	</select>
	
	<select id="getProcMergeDataSql2" resultType="java.lang.String">
		select F_GET_PROC_MERGEDATASQL_MODE2(#{flowid},#{targettable},#{srctable1},#{srctable2}) as runsql from dual
	</select>
	
	<select id="getProcMergeDataSql3" resultType="java.lang.String">
		select F_GET_PROC_MERGEDATASQL_MODE3(#{flowid},#{targettable},#{srctable1},#{srctable2}) as runsql from dual
	</select>
	
	<select id="getProcMergeDataSql4" resultType="java.lang.String">
		select F_GET_PROC_MERGEDATASQL_MODE4(#{flowid},#{targettable},#{srctable1},#{srctable2}) as runsql from dual
	</select>
	
	<!-- 数据去重 -->
	<insert id="writeDistinctField">
		insert into TOOL_FLOW_DISTINCT(id,flow_id,field_id) values(SEQ_DISTINCT_ID.nextval,#{flowid},#{id})
	</insert>
	
	<select id="getProcDistinctDataSql" resultType="java.lang.String">
		select F_GET_PROC_DISTINCTDATASQL(#{flowid},#{targettable},#{srctable},#{mode}) as runsql from dual
	</select>
	
	<!-- 数据排序 -->
	<insert id="writeSortTableField">
		insert into TOOL_DEF_TABLEFIELD select SEQ_TABLEFIELD_ID.nextval,a.* from (select '${targettable}','AUTOFIELD'||rownum,field_alias,'1',field_type,field_length,id,field_order,'' from TOOL_DEF_TABLEFIELD where table_name=#{srctable} order by field_order) a
	</insert>
	
	<insert id="writeSortField">
		insert into TOOL_FLOW_SORT(id,FLOW_ID,SORT_FIELD_ID,SORT_TYPE) select SEQ_SOFT_ID.nextval,#{flowid},id,#{softmode} from TOOL_DEF_TABLEFIELD where table_name=#{targettable} and from_fieldid=#{fieldid}
	</insert>
	
	<select id="getProcSortDataSql" resultType="java.lang.String">
		select F_GET_PROC_SORTDATASQL(#{flowid},#{targettable},#{srctable}) as runsql from dual
	</select>
	
	<!-- 数据叠加 -->
	<select id="getCountOverlayTable" resultType="java.lang.Integer">
		select count(1) from TOOL_FLOW_OVERLAY where flow_id=#{flowid} and src_table=#{srctable}
	</select>
	
	<insert id="writeOverlayTableInfo">
		insert into TOOL_FLOW_OVERLAY values(SEQ_OVERLAY_ID.nextval,#{flowid},#{srctable})
	</insert>
	
	<insert id="writeOverlayFieldInfo">
		insert into TOOL_DEF_TABLEFIELD select SEQ_TABLEFIELD_ID.nextval,#{targettable},'AUTOFIELD'||rownum,field_alias,1,field_type,field_length,id,rownum,'' from (select a.id,a.field_alias,a.field_type,a.field_length,row_number() OVER(PARTITION BY a.field_alias,a.field_type order by a.id) as rnum from TOOL_DEF_TABLEFIELD a,TOOL_FLOW_OVERLAY b where a.table_name=b.src_table and b.flow_id=#{flowid} order by b.id,a.id) aa where aa.rnum=1
	</insert>
	
	<select id="selectOverlayTableList" resultType="java.lang.String">
		select src_table from TOOL_FLOW_OVERLAY where flow_id=#{flowid}
	</select>
	
	<select id="getProcOverlayDataSql" resultType="java.lang.String">
		select F_GET_PROC_OVERLAYDATASQL(#{flowid},#{targettable},#{srctable},#{curtable}) as runsql from dual
	</select>
	
	<!-- 流程修改相关 -->
	<!-- 检测选择字段是否缺少在下级流程使用的字段 -->
	<select id="checkSelectFieldIsWrong" resultType="java.util.Map">
		select a.table_alias as tablealias,F_GET_fieldALIAS(b.from_fieldid) as fromfield from (
		select distinct from_fieldid,F_GET_TOOL_TABLEALIAS(table_name) as table_alias from TOOL_DEF_TABLEFIELD where table_name in(
		select target_table from TOOL_DEF_FLOW where parent_flow_id=#{flowid} union
		select target_table from TOOL_DEF_FLOW where source_table2=#{targettable})) a,TOOL_DEF_TABLEFIELD b
		<where>
			a.from_fieldid=b.id and b.table_name=#{targettable} and b.field_entity_type=1 
			and b.from_fieldid||'-'||b.field_script not in 
				<foreach item="item" index="index" collection="fieldids" open="(" separator="," close=")">  
			  		#{item}
				</foreach>
		</where> 
		order by a.table_alias,b.id
	</select>
	
	<!-- 检测叠加操作修改的表，是否存在缺少在下级流程使用的字段 -->
	<select id="checkSelectTableIsWrong" resultType="java.util.Map">
		<!-- 
		select a.table_alias as tablealias,F_GET_fieldALIAS(b.from_fieldid) as fromfield from (        
        select distinct from_fieldid,F_GET_TOOL_TABLEALIAS(table_name) as table_alias from TOOL_DEF_TABLEFIELD where table_name in(
        select target_table from TOOL_DEF_FLOW where parent_flow_id=#{flowid} union
        select target_table from TOOL_DEF_FLOW where source_table2=#{targettable})) a,TOOL_DEF_TABLEFIELD b,TOOL_DEF_TABLEFIELD c
        <where>
        	a.from_fieldid=b.id and b.table_name=#{targettable} and b.field_entity_type=1 and b.from_fieldid=c.id
        	and c.table_name not in
        	<foreach item="item" index="index" collection="tables" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
        </where>
    	-->
	    <!-- 叠加表字段信息检测与其他流程不同，要通过别名来进行识别，下级使用到的字段别名不在选择的范围内，就需要进行处理,
	    	如果流程修改删除掉的表字段，在其他表中存在相同的别名，是允许替换的，不会识别为错误,
	    	叠加表流程写入数据，也是根据别名识别，进行数据写入的，同一个别名，一定只有一个对应字段。
	     -->
	    select a.table_alias as tablealias,F_GET_fieldALIAS(b.from_fieldid) as fromfield from (        
	        select distinct from_fieldid,F_GET_TOOL_TABLEALIAS(table_name) as table_alias from TOOL_DEF_TABLEFIELD where table_name in(
	        select target_table from TOOL_DEF_FLOW where parent_flow_id=#{flowid} union
	        select target_table from TOOL_DEF_FLOW where source_table2=#{targettable})) a,TOOL_DEF_TABLEFIELD b
	        where a.from_fieldid=b.id and b.field_entity_type=1  and b.table_name=#{targettable}
	        and b.field_alias not in (select field_alias from TOOL_DEF_TABLEFIELD where table_name in 
	        	<foreach item="item" index="index" collection="tables" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        )
	</select>
	
	<!-- 根据表别名获取数量，用于识别是否重复,流程修改使用 -->
	<select id="getTableCountByAlias2" resultType="java.lang.Integer">
		select count(1) as tablecount from TOOL_DEF_TABLE where table_alias=#{tablealias} and table_name!=#{targettable}
	</select>
	
	<!-- 修改表信息 -->
	<update id="updateTaretTableInfo">
		update TOOL_DEF_TABLE set table_alias=#{tablealias} where table_name=#{targettable}
	</update>
	
	<!-- 修改流程，修改流程信息，可能变动的项包括 -->
	<update id="updateFlowInfo">
		update TOOL_DEF_FLOW set
			flow_name=#{tablealias}
			<if test="@Ognl@isNotBlank(mode)">
				,proc_mode=#{mode}
			</if>
			<if test="@Ognl@isNotBlank(srctable2)">
				,source_table2=#{srctable2}
			</if>
		<where>
			id=#{flowid}
		</where>		
	</update>
	
	<!-- 修改流程，先清除字段信息，只清除本表实体字段，虚拟字段排序需要延后，不能清除-->
	<delete id="deleteFieldInfo">
		delete from TOOL_DEF_TABLEFIELD 
		<where>
			table_name=#{targettable} and field_entity_type=1
			and from_fieldid||'-'||field_script not in 
				<foreach item="item" index="index" collection="fieldids" open="(" separator="," close=")">  
			  		#{item}
				</foreach>
		</where>
	</delete>
	
	<!-- 修改流程，修改表字段信息，主要是修改排序 -->
	<update id="updateFieldInfo">
		update TOOL_DEF_TABLEFIELD 
			set field_order=#{fieldorder},field_name='AUTOFIELD'||#{fieldorder}
		<where>
			table_name=#{targettable} and from_fieldid=#{fromfieldid}
			<if test="@Ognl@isNotBlank(collecttype)">
			    and field_script =  #{collecttype} 
			 </if>
		</where>
	</update>
	
	<!-- 修改流程，在修改字段信息后，修改虚拟字段排序 -->
	<insert id="updateVirtualFieldOrder">
		call PROC_MODIFYFIELDORDER(#{targettable})
	</insert>
	
	<!-- 修改流程，删除提取操作数据范围 -->
	<delete id="deleteGetRange">
		delete from TOOL_FLOW_RANGE where flow_id=#{flowid}
	</delete>
	
	<!-- 修改流程，删除条件信息 -->
	<delete id="deleteCondition">
		delete from TOOL_FLOW_CONDITION where flow_id=#{flowid}
	</delete>
	
	<!-- 修改流程，删除排序信息 -->
	<delete id="deleteSortInfo">
		delete from TOOL_FLOW_SORT where flow_id=#{flowid}
	</delete>
	
	<!-- 修改流程，删除排重信息 -->
	<delete id="deleteDistinctInfo">
		delete from TOOL_FLOW_DISTINCT where flow_id=#{flowid}
	</delete>
	
	<!-- 修改流程，删除排重信息 -->
	<delete id="deleteMergeInfo">
		delete from TOOL_FLOW_MERGE where flow_id=#{flowid}
	</delete>
	
	<!-- 修改流程，删除叠加表信息 -->
	<delete id="deleteOverlayInfo">
		delete from TOOL_FLOW_OVERLAY where flow_id=#{flowid}
	</delete>
	
	<!-- 修改流程，删除掉表中叠加的不相关表的字段，然后进行更新 -->
	<!-- 删除掉别名不在范围内的字段信息，流程此前有下级流程使用字段判断，所以这里不用再识别,直接删除多余字段即可 -->
	<delete id="deleteOverLayFieldInfo">
		delete from TOOL_DEF_TABLEFIELD 
		where table_name=#{targettable} and field_entity_type=1 and field_alias not in 
		(select field_alias from TOOL_DEF_TABLEFIELD where table_name in 
			<foreach item="item" index="index" collection="tables" open="(" separator="," close=")">
	        	 #{item}
	        </foreach>
		)    
	</delete>
	
	<!-- 修改叠加表字段信息 -->
	<update id="editOverlayFieldInfo">
		call PROC_MODIFYOVERLAYFIELD(#{targettable},#{flowid})
	</update>
	
	<!-- 提取所有下级流程，不包含本流程 -->
	<select id="getFlowChildTree" resultType="java.lang.String">
		select F_MK_CHILC_FLOWTREE(#{flowid},#{targettable}) as flowtree from dual
	</select>
		
</mapper>